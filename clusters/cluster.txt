************** ONE TIME ACTIVIT ***********************************
Start a Server
Make redis ready: https://github.com/ankitforcodes/redis/blob/main/installing_correctly.txt
  
***********************************************************************************
Once the above is done for all 3 servers
* make 6 redis.conf files with different ports
* Ideally these would be running in 6 different 

In each redis.conf file:
  port 7000
  cluster-enabled yes
  cluster-config-file nodes.conf
  cluster-node-timeout 5000
  appendonly yes
  protected-mode no
  
  
  port 7001
  cluster-enabled yes
  cluster-config-file nodes.conf
  cluster-node-timeout 5000
  appendonly yes
  protected-mode no
  
  port 7002
  cluster-enabled yes
  cluster-config-file nodes.conf
  cluster-node-timeout 5000
  appendonly yes
  protected-mode no
  
  port 7003
  cluster-enabled yes
  cluster-config-file nodes.conf
  cluster-node-timeout 5000
  appendonly yes
  protected-mode no
  
  port 7004
  cluster-enabled yes
  cluster-config-file nodes.conf
  cluster-node-timeout 5000
  appendonly yes
  protected-mode no
  
  port 7005
  cluster-enabled yes
  cluster-config-file nodes.conf
  cluster-node-timeout 5000
  appendonly yes
  protected-mode no
  
* Start all redis instances BY GOING INSIDE INDIVIDUAL DIRECTORIES : Dont run from outside the directory
  becuase nodes.conf file gets generated in the current path
  If we use common path - node.conf will clash
  cd 7000
  redis-server 7000.conf
  
  cd 7001
  redis-server 7001.conf
  
  cd 7002
  redis-server 7002.conf
  
  
  cd 7003
  redis-server 7003.conf
  
  
  
  cd 7004
  redis-server 7004.conf
  
  
  cd 7005
  redis-server 7005.conf
  
  Note the their mode is: CLuster Mode
  
  ALL NODES ARE RUNNING IN CLUSTER MODE NOW - BUT NOT TALKING TO EACH OTHER
***********************************************************************************

Start another shell on any one node and run:
redis-cli -h 206.189.110.103 -p 6379 --cluster create N1:6379 N2:6380 N3:6379 N4:6380 N5:6379 N:6380 --cluster-replicas 1


Notice the following sentences:
Master[0] -> Slots 0 - 5460
Master[1] -> Slots 5461 - 10922
Master[2] -> Slots 10923 - 16383


Adding replica X:6379 to X:6379
Adding replica X:6380 to X:6379
Adding replica X:6380 to X:6380

If you see OK message, you cluster setup is ready
***************************************************************************************

Connect to any redis-instance via redis-cli and to check its role:
redis-cli -c -h 157.245.112.53 -p 7000

-c flag is important - it tells the cli we want to connect to a server which is part of a cluster

set name Ankit
Redirected to slot [5798] located at 157.245.112.53:7001


Notice how getting and setting from one redis-instance is able to get the hashslot and find the key from any servers
Even slaves are able to accept write commands and redirect to masters (which was not allowed in replication without cluster)
